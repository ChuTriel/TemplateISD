import math
import random
from Instance import *

# returns an array (or string) in which each element represents the weight of a 32 bit chunk
def computeWeightVector(e: str, stepsize=32):
    posInBlock = 0
    currWeightBlock = 0
    weights = ""

    for c in e:
        if c == "1":
            currWeightBlock+=1
        posInBlock+=1

        if posInBlock == stepsize:
            weights += str(currWeightBlock)
            posInBlock = 0
            currWeightBlock = 0

    if posInBlock > 0:
        weights += str(currWeightBlock)

    return weights

def computeNewNandAddRows(weightDistro: str, n: int, stepsize=32):
    cols = 0
    rows = 0 
    for x in range(len(weightDistro)-1):
        if weightDistro[x] != "0":
            cols += stepsize
            rows += 1

    if weightDistro[len(weightDistro)-1] != "0":
        rows += 1
        if n % stepsize == 0:
            cols += stepsize
        else:
            cols += n % stepsize

    return cols, rows

# converts [   1: 1  ] to 00010100
def convertErrorFormat(e: str):
    ret = e.replace("[", "")
    ret = ret.replace("]", "")
    ret = ret.replace(":", "")
    ret = ret.replace("|", "")
    ret = ret.replace(" ", "0")
    return ret

# n = length of e, weight = hamming weight of e
def generateRandomErrorVector(n: int, weight: int):
    e = ["0"] * n
    # https://stackoverflow.com/questions/9755538/how-do-i-create-a-list-of-random-numbers-without-duplicates
    positions = random.sample(range(n), weight)
    for pos in positions:
        e[pos] = "1"
    return "".join(e)

# n = length, w = weight
def generateErrorAndInfo(n: int, w: int, targetBlocks = -1):
    e = generateRandomErrorVector(n, w)
    wV = computeWeightVector(e)
    cols, rows = computeNewNandAddRows(wV, n)
    print(e)
    print("distribution: " + wV)
    print("cols: {}, rows: {}".format(cols, rows))

if __name__ == "__main__":
    #generateErrorAndInfo(inst482.n, inst482.w)
    #generateErrorAndInfo(inst640.n, inst640.w)
    #generateErrorAndInfo(inst751.n, inst751.w)
    #generateErrorAndInfo(inst808.n, inst808.w)
    #generateErrorAndInfo(inst923.n, inst923.w)
    #generateErrorAndInfo(inst982.n, inst982.w)
    #generateErrorAndInfo(inst1041.n, inst1041.w)
    #generateErrorAndInfo(inst1101.n, inst1101.w)
    #generateErrorAndInfo(inst1223.n, inst1223.w)
    #generateErrorAndInfo(inst1473.n, inst1473.w)
    #generateErrorAndInfo(inst1665.n, inst1665.w)
    #generateErrorAndInfo(inst1995.n, inst1995.w)
    #generateErrorAndInfo(inst2129.n, inst2129.w)
    #generateErrorAndInfo(inst2197.n, inst2197.w)
    #generateErrorAndInfo(inst2265.n, inst2265.w)
    #generateErrorAndInfo(inst2472.n, inst2472.w)

    # eW = "010001001010100000102000010002001210111101000010000011120110202110020"
    # cols, rows = computeNewNandAddRows(eW, 2197)
    # print("cols: ", cols, "rows: ", rows)
    # sum = 0
    # for c in eW:
    #     if c != "0":
    #         sum += int(c)
    # print(sum)

    # e
    # weights = computeWeightVector(e)
    # print(weights)

    pass